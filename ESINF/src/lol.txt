import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class lol {

    static List<Championship> readChampionshipsFromCSV(String fileName) {

        List<List<String>> list = new ArrayList<List<String>>();
        List<Championship> champList = new ArrayList<Championship>();
        List<Race> racesList = new ArrayList<Race>();

        Scanner s;
        try {
            s = new Scanner(new File(fileName));

            while(s.hasNext()) {
                list.add(Arrays.asList(s.nextLine().split(",",-1)));
            }

        } catch(IOException ioe){
            ioe.printStackTrace();
        }

        for(int i = 1, iRace = 0, iChamp = 0; i < list.size(); i+=2, iChamp++) {
            String racer = list.get(i).get(0); //  racer
            int year = Integer.parseInt(list.get(i).get(1)); // year
            String category = list.get(i).get(2); // class
            String bike = list.get(i).get(3); // bike

            String tempPos = list.get(i).get(25); // -> position concatenate
            String temp = tempPos.substring(0, 1);

            int position = Integer.parseInt(temp); // position
            int points = Integer.parseInt(list.get(i).get(26)); // points

            champList.add(new Championship(year, racer, category, bike, position, points));

            for(int j = 4; j < 25; j++, iRace++) {

                String circuit = list.get(i).get(j);
                String place = list.get(i+1).get(j);

                if(place.equals("") || (int)place.charAt(0)>57 || (int)place.charAt(0)<47)  // if position == DNS or Ret
                    racesList.add(new Race(circuit, racer, year, 0, false));
                else { // if finishes place
                    int placeInt = Integer.parseInt(list.get(i+1).get(j)); // points
                    racesList.add(new Race(circuit, racer, year, placeInt, true));
                }
                champList.get(iChamp).addRace(j-3, racesList.get(iRace));

            }
        }
        return champList;
    }

    static void sortChampionships(List<Championship> champs) {

        for(int i = 0; i < champs.size(); i++) {
            for(int j = i+1; j < champs.size(); j++) {
                Championship a = champs.get(i);
                Championship b = champs.get(j);
                if(a.compareTo(b)>0) {
                    champs.set(i, b);
                    champs.set(j, a);
                }
            }
        }

    }

    static void printChampionships(List<Championship> champs) {
        champs.forEach(System.out::println);
    }

    static List<Championship> filterByRacer(List<Championship> champs, String racer) {

        List<Championship> newChamps = new ArrayList<Championship>();

        for(Championship a: champs) {
            if(racer.equals(a.getRacer()))
                newChamps.add(a);
        }
        return newChamps;
    }

    static List<Championship> filterByTeam(List<Championship> champs, String teamName, String category) {

        List<Championship> newChamps = new ArrayList<Championship>();

        for(Championship a: champs) {
            if(teamName.equals(a.getBike()) && category.equals(a.getCategory()))
                newChamps.add(a);
        }
        return newChamps;
    }

    static void printRacerStats(List<Championship> champs, String racer) {

        int firstPlace = 0;
        int secondPlace = 0;
        int thirdPlace = 0;

        for(Championship a: champs) {
            if(racer.equals(a.getRacer())) {
                for(int i = 1; i <= 21; i++) {
                    Race actual = a.getRace(i);
                    if(actual!=null) {
                        int pos = actual.getPosition();
                        if(pos == 1) firstPlace++;
                        if(pos == 2) secondPlace++;
                        if(pos == 3) thirdPlace++;
                    }
                }
            }
        }

        System.out.println("Racer: " + racer);
        System.out.println("1st: " + firstPlace);
        System.out.println("2nd: " + secondPlace);
        System.out.println("3rd: " + thirdPlace);
    }

    static void printRacerCircuitRanking(List<Championship> champs, String racer) {

        HashMap<String, Integer> mp = new HashMap<String, Integer>();

        for (Championship a : champs) {
            if (racer.equals(a.getRacer())) {
                for (int i = 1; i <= 21; i++) {
                    String circuit = a.getRace(i).getCircuit();
                    if(circuit.equals("")) continue;

                    int initPos = a.getRace(i).getPosition();
                    int pos = 0;
                    if(mp.get(circuit)==null) {
                        if(initPos < 10 && initPos > 0) pos = (int) (Math.round(Math.pow(2, (11 - a.getRace(i).getPosition()))));
                        else if (initPos==10) pos = 1;
                        mp.put(circuit, pos);
                        continue;
                    }
                    if((mp.get(circuit))!=null)
                        if (initPos < 10 && initPos > 0) {
                            pos = (int) (Math.round(Math.pow(2, (11 - a.getRace(i).getPosition()))));
                            mp.put(circuit, mp.get(circuit) + pos);
                        }
                        else if (initPos==10) {
                            pos = (int) (Math.round(Math.pow(2, (11 - a.getRace(i).getPosition()))));
                            mp.put(circuit, mp.get(circuit) + 1);
                        }
                }
            }

        }

        List<String> keysList = new ArrayList<String>();
        List<Integer> valuesList = new ArrayList<Integer>();

        for(String typeKey: mp.keySet()) {
            String key = typeKey.toString();
            int value = mp.get(typeKey);
            if(value!=0) {
                keysList.add(key);
                valuesList.add(value);
                //System.out.println(key + " " + value);
            }
        }
        //System.out.println();

        for(int i = 0; i < keysList.size(); i++) {
            for(int j = i+1; j < keysList.size(); j++) {
                String a = keysList.get(i);
                String b = keysList.get(j);
                int c = valuesList.get(i);
                int d = valuesList.get(j);
                if(compareToRacerCircuitRanking(c,d,i,j,a,b)>0) {
                    keysList.set(i, b);
                    valuesList.set(i, d);
                    keysList.set(j, a);
                    valuesList.set(j, c);
                }
            }
        }

        for(int i = 0; i < keysList.size(); i++) {
            System.out.println(keysList.get(i) + " " + valuesList.get(i));
        }


    }

    private static int compareToRacerCircuitRanking(int i1, int i2, int i, int j, String s1, String s2) {
        if(i1>i2)
            return -1;
        else if(i1<i2)
            return 1;
        else // if same year
            return compareToCircuitRanking(s1,s2,i,j);
    }

    private static int compareToCircuitRanking(String s1, String s2, int i, int j) {
        if(!s1.equals(s2))
            return s1.compareTo(s2);
        return 0;
    }

    static List<Race> getBestRaces(List<Championship> champs, String racer) {

        List<Race> list = new ArrayList<Race>();

        for(Championship a: champs) {
            if(racer.equals(a.getRacer())) {
                for(int i = 1; i <= 21; i++) {
                    int pos = a.getRace(i).getPosition();
                    if(pos<=5&&pos>0)
                        list.add(a.getRace(i));
                }
            }
        }

        for(int i = 0; i < list.size(); i++) {
            for(int j = i+1; j < list.size(); j++) {
                Race a = list.get(i);
                Race b = list.get(j);
                if(compareToGetBestRaces(a,b)>0) {
                    list.set(i, b);
                    list.set(j, a);
                }
            }
        }

        return list;
    }

    public static int compareToGetBestRaces(Race r1, Race r2) {
        if(r1.getPosition()<r2.getPosition())
            return -1;
        else if(r1.getPosition()>r2.getPosition())
            return 1;
        else  // if same position
            return compareToYear(r1,r2);
    }

    private static int compareToYear(Race r1, Race r2) {
        if(r1.getYear()>r2.getYear())
            return -1;
        else if(r1.getYear()<r2.getYear())
            return 1;
        else // if same year
            return compareToCircuit(r1,r2);
    }

    private static int compareToCircuit(Race r1, Race r2) {
        if(!r1.getCircuit().equals(r2.getCircuit()))
            return r1.getCircuit().compareTo(r2.getCircuit());
        return 0;
    }

    static List<String> getTeams(List<Championship> champs, String category) {

        List<String> list = new ArrayList<String>();
        HashMap<String, Boolean> mp = new HashMap<String, Boolean>();

        for(Championship a: champs) {
            if(a.getCategory().equals(category)) {
                if(mp.get(a.getBike())==null)
                    list.add(a.getBike());
                mp.put(a.getBike(), true);
            }
        }
        return list;
    }


    public static void main(String[] args) {
        // TODO Auto-generated method stub
        List<Championship> champList = new ArrayList<Championship>();
        champList = readChampionshipsFromCSV("C:/Users/Me/Desktop/exemplo3.txt");

//		for(Championship a : champList) {
//			System.out.print(a.toString());
//		}

        //sortChampionships(champList);
//		printChampionships(champList);
//		printRacerStats(champList, "Miguel Oliveira");
//		List<String> list = new ArrayList<String>();
//		list = getTeams(champList, "Moto2");
//		list.forEach(System.out::println);
//		
//		
//		List<Race> listR = new ArrayList<Race>();
//		listR = getBestRaces(champList, "Miguel Oliveira");
//		listR.forEach(System.out::println);
//	

        printRacerCircuitRanking(champList, "Fabio Quartararo");
    }

}